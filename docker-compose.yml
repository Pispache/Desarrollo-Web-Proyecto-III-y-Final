# Orquestación del stack del marcador: DB (SQL Server 2022), inicializador, API .NET 8 y UI Angular+Nginx.
services:
  db:
  # Imagen oficial de SQL Server 2022; requiere SA_PASSWORD fuerte en .env
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: marcador_db
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SA_PASSWORD}
      - MSSQL_TCP_PORT=1435
    ports:
      - "127.0.0.1:1435:1435"
    volumes:
      - ./db:/db
    healthcheck:
      test: ["CMD-SHELL", "bash -lc 'echo > /dev/tcp/127.0.0.1/1435'"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 20s
    profiles: ["db", "api", "all"]

  db_init:
  # Ejecuta scripts de creación/semilla cuando db esté healthy
    image: mcr.microsoft.com/mssql-tools:latest
    container_name: marcador_db_init
    depends_on:
      db:
        condition: service_started
    environment:
      - SA_PASSWORD=${SA_PASSWORD}
    volumes:
      - ./db:/db
      - ./scripts:/scripts
    entrypoint: ["/bin/bash","-c","/scripts/espera_sql.sh db 1435 /scripts/db-init.sh"]
    restart: "no"
    profiles: ["db", "api", "all"]

  api:
   # API ASP.NET Core 8; expone 8080 hacia la red del host
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: marcador_api
    depends_on:
      db:
        condition: service_started
      db_init:
        condition: service_completed_successfully
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
      - DB_CONNECTION_STRING=Server=db,1435;Database=${DB_NAME};User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=True;
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRES_MINUTES=${JWT_EXPIRES_MINUTES}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      # Opción sencilla: archivo JSON montado dentro del contenedor
      - ADMIN_USERS_FILE=/app/users.json
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./users.json:/app/users.json:ro
      - ./api/wwwroot:/app/wwwroot
    profiles: ["api", "all"]

  ui:
  # UI Angular compilada servida por Nginx; expone 80 interno como 4200 en host
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: marcador_ui
    depends_on:
      api:
        condition: service_started   # espera a que el contenedor api esté arrancado
    restart: unless-stopped          # si falla por DNS al principio, se reinicia solo
    ports:
      - "127.0.0.1:4200:80"
    profiles: ["ui", "all"]

  # ============================
  # Base de datos Postgres para reportes
  # ============================
  postgres:
    image: postgres:16-alpine
    container_name: marcador_pg
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-reports_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-reports_admin_pwd}
      - POSTGRES_DB=${POSTGRES_DB:-reportsdb}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/pg/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 30
    profiles: ["reports", "all"]

  # ============================
  # Servicio de reportes (FastAPI)
  # ============================
  report-service:
    build:
      context: ./reports
      dockerfile: Dockerfile
    container_name: marcador_reports
    depends_on:
      postgres:
        condition: service_healthy
      pdf-renderer:
        condition: service_healthy
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - SYSTEM_LOGO_URL=${SYSTEM_LOGO_URL:-http://localhost:8080/uploads/logos/system.png}
      - POSTGRES_CS=host=postgres port=5432 dbname=${POSTGRES_DB:-reportsdb} user=${POSTGRES_USER:-reports_admin} password=${POSTGRES_PASSWORD:-reports_admin_pwd}
      - PDF_RENDERER_URL=http://pdf-renderer:3000
    ports:
      - "127.0.0.1:8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8081/health"]
      interval: 5s
      timeout: 5s
      retries: 30
    profiles: ["reports", "all"]

  # ============================
  # Renderizador de PDF (Node + Express + Puppeteer placeholder)
  # ============================
  pdf-renderer:
    build:
      context: ./pdf-renderer
      dockerfile: Dockerfile
    container_name: marcador_pdf
    ports:
      - "127.0.0.1:3001:3000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 5s
      timeout: 5s
      retries: 30
    profiles: ["reports", "all"]

  # ============================
  # ETL incremental (placeholder)
  # ============================
  etl:
    build:
      context: ./etl
      dockerfile: Dockerfile
    container_name: marcador_etl
    depends_on:
      db:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - ETL_INTERVAL_SECONDS=${ETL_INTERVAL_SECONDS:-120}
      - MSSQL_CS=DRIVER={ODBC Driver 18 for SQL Server};Server=db,1435;Database=${DB_NAME};UID=sa;PWD=${SA_PASSWORD};TrustServerCertificate=yes;
      - POSTGRES_CS=host=postgres port=5432 dbname=${POSTGRES_DB:-reportsdb} user=${POSTGRES_USER:-reports_admin} password=${POSTGRES_PASSWORD:-reports_admin_pwd}
    profiles: ["reports", "all"]

volumes:
  pg_data:
